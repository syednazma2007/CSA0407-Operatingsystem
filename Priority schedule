#include <stdio.h>
#include <stdlib.h>


struct Process {
    int pid;        
    int burst;      
    int completed; 
};

int findShortestJob(struct Process processes[], int n, int current_time) {
    int min_burst = 999999; /
    int min_index = -1;

    for (int i = 0; i < n; i++) {
        if (!processes[i].completed && processes[i].burst < min_burst) {
            min_burst = processes[i].burst;
            min_index = i;
        }
    }
    return min_index;
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    
    
    for (int i = 0; i < n; i++) {
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst);
        processes[i].pid = i + 1;
        processes[i].completed = 0;
    }

    
    int current_time = 0;
    float total_waiting_time = 0.0;
    int completed_processes = 0;

    printf("\n--- SJF Scheduling Results ---\n");
    printf("Process\tBurst Time\tCompletion Time\tWaiting Time\n");
    printf("-------\t----------\t---------------\t------------\n");

    while (completed_processes < n) {
        
        int idx = findShortestJob(processes, n, current_time);
        if (idx == -1) break; 
        processes[idx].completed = 1;
        current_time += processes[idx].burst;
        int waiting_time = current_time - processes[idx].burst; // Since arrival time = 0
        total_waiting_time += waiting_time;
        completed_processes++;

        printf("P%d\t%d\t\t%d\t\t\t%d\n", processes[idx].pid, processes[idx].burst, current_time, waiting_time);
    }

    float avg_waiting_time = total_waiting_time / n;
    printf("--------------------------------\n");
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);

    return 0;
}
