#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

// Function executed by each thread
void* worker(void* arg) {
    int thread_id = *((int*)arg);
    printf("Thread %d: Starting work...\n", thread_id);

    // Simulate some work
    for (int i = 1; i <= 3; i++) {
        printf("Thread %d: Working %d\n", thread_id, i);
        sleep(1);
    }

    printf("Thread %d: Finished work!\n", thread_id);
    return NULL;
}

int main() {
    int n;
    printf("Enter number of threads: ");
    scanf("%d", &n);

    pthread_t threads[n];
    int thread_ids[n];

    // Create threads
    for (int i = 0; i < n; i++) {
        thread_ids[i] = i + 1;
        if (pthread_create(&threads[i], NULL, worker, &thread_ids[i]) != 0) {
            perror("Failed to create thread");
            return 1;
        }
    }

    // Wait for all threads to finish
    for (int i = 0; i < n; i++) {
        pthread_join(threads[i], NULL);
    }

    printf("All threads completed.\n");
    return 0;
}
