#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define N 5  // Number of philosophers

pthread_mutex_t chopstick[N]; // One chopstick between each philosopher

void* philosopher(void* num) {
    int id = *(int*)num;

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        // Pick left chopstick
        pthread_mutex_lock(&chopstick[id]);
        printf("Philosopher %d picked up left chopstick.\n", id);

        // Pick right chopstick
        pthread_mutex_lock(&chopstick[(id + 1) % N]);
        printf("Philosopher %d picked up right chopstick and starts eating.\n", id);

        // Eating
        sleep(2);

        // Put down right chopstick
        pthread_mutex_unlock(&chopstick[(id + 1) % N]);
        printf("Philosopher %d put down right chopstick.\n", id);

        // Put down left chopstick
        pthread_mutex_unlock(&chopstick[id]);
        printf("Philosopher %d put down left chopstick.\n", id);
    }
}

int main() {
    pthread_t philosophers[N];
    int ids[N];

    // Initialize mutexes
    for (int i = 0; i < N; i++) {
        pthread_mutex_init(&chopstick[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    // Wait for threads (they run infinitely)
    for (int i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
