#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

sem_t rw_mutex;        // for read/write (writers exclusive access)
sem_t mutex;           // for protecting read_count
int read_count = 0;    // number of readers currently reading
int shared_data = 0;   // shared resource

void* reader(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&mutex);
        read_count++;
        if (read_count == 1)
            sem_wait(&rw_mutex);  // first reader locks resource
        sem_post(&mutex);

        // Reading section
        printf("Reader %d: read shared_data = %d\n", id, shared_data);
        sleep(1);

        sem_wait(&mutex);
        read_count--;
        if (read_count == 0)
            sem_post(&rw_mutex);  // last reader unlocks resource
        sem_post(&mutex);

        sleep(rand() % 3); // simulate delay
    }
    return NULL;
}

void* writer(void* arg) {
    int id = *(int*)arg;
    while (1) {
        sem_wait(&rw_mutex); // writer locks resource

        // Writing section
        shared_data += 10;
        printf("Writer %d: updated shared_data to %d\n", id, shared_data);
        sleep(2);

        sem_post(&rw_mutex); // writer unlocks
        sleep(rand() % 3);
    }
    return NULL;
}

int main() {
    pthread_t r[3], w[2];
    int r_id[3] = {1, 2, 3};
    int w_id[2] = {1, 2};

    sem_init(&rw_mutex, 0, 1);
    sem_init(&mutex, 0, 1);

    // Create reader threads
    for (int i = 0; i < 3; i++) {
        pthread_create(&r[i], NULL, reader, &r_id[i]);
    }

    // Create writer threads
    for (int i = 0; i < 2; i++) {
        pthread_create(&w[i], NULL, writer, &w_id[i]);
    }

    // Join threads (infinite loop so program must be killed manually)
    for (int i = 0; i < 3; i++) pthread_join(r[i], NULL);
    for (int i = 0; i < 2; i++) pthread_join(w[i], NULL);

    sem_destroy(&rw_mutex);
    sem_destroy(&mutex);

    return 0;
}
